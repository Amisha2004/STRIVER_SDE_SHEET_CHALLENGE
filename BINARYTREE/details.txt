/** THIS FILE CONTAINS A BRIEF DESCRIPTION OF ALL FILE IN THIS FOLDER **/


>> bt1.cpp
  1. INORDER TRAVERSAL
  2. PREORDER TRAVERSAL
  3. POSTORDER TRAVERSAL
  4. MORRIS INORDER TRAVERSAL
  5. MORRIS PREORDER TRAVERSAL
  
>> bt2.cpp
  1. LEFT VIEW OF BINARY TREE
  2. RIGHT VIEW OF BINARY TREE
  3. BOTTOM VIEW OF BINARY TREE
  4. TOP VIEW OF BINARY TREE
  5. VERTICAL ORDER TRAVERSAL
  6. ROOT TO NODE PATH IN A BINARY TREE
  7. MAXIMUM WIDTH OF BINARY TREE
 
>> bt3.cpp
  1. LEVEL ORDER TRAVERSAL
  2. HEIGHT OF BINARY TREE FROM INORDER AND LEVEL ORDER TRAVERSAL
  3. DIAMETER OF BINARY TREE
  4. IS HEIGHT BALANCED BINARY TREE
  5. LCA IN BINARY TREE
  6. CHECK IDENTICAL TREES
  7. BINARY TREE ZIG ZAG TRAVERSAL
  8. BOUNDARY TRAVERSAL OF BINARY TREE

>> bt4.cpp
  1. MAXIMUM PATH SUM
  2. CONSTRUCT BINARY TREE FROM INORDER AND PREORDER TRAVERSAL
  3. CONSTRUCT BINARY TREE FROM INORDER AND POSTORDER TRAVERSAL
  4. SYMMETERICAL TREE
  5. FLATTEN BINARY TREE TO LINKED LIST
  6. INVERT A BINARY TREE
  7. CHILDREN SUM PROPERTY
  
>> bst1.cpp
  1. CONNECT NODES AT SAME LEVEL
  2. SEARCH IN BST
  3. CONSTRUCT BST FROM GIVEN KEYS
  4. CONSTRUCT A BST FROM PREORDER TRAVERSAL
  5. CHECK A BT IS BST OR NOT
  6. LCA OF TWO NODES IN A BST
  7. PREDECESSOR AND SUCCESSOR IN A BST
 
>> bst2.cpp
  1. FLOOR IN A BST
  2. CEIL FROM BST
  3. FIND Kth SMALLEST ELEMENT IN BST
  4. FIND Kth LARGEST ELEMENT IN A BST
  5. FIND PAIR WITH GIVEN SUM IN BST
  6. BST ITERATOR
  7. SIZE OF LARGEST BST IN A BINARY TREE
  8. SERIALIZE AND DESERIALIZE BINARY TREE
  
>> bt_mis.cpp (miscellaneous)
// SOME QUESTIONS OF THIS SECTION DOES NOT BELONGS TO BINARY TREE
  1. CONVERT GIVEN BINARY TREE INTO DOUBLE LINKED LIST
  2. MEDIAN IN STREAM
  3. Kth LARGEST ELEMENT IN STREAM
  4. COUNT DISTINCT ELEMENT IN EVERY K SIZE WINDOW
  5. Kth LARGEST ELEMENT IN A UNSORTED ARRAY
  6. FLOOD FILL ALGORITHM
